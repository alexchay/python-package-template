# [build-system]
# requires = ["setuptools", "wheel", "cython"]
# build-backend = "setuptools.build_meta"

[project]
name = "python-package-template"
version = "0.0.1"
description = "Cookiecutter template for Python cli/packages"
authors = [{ email = "alexchay@gmail.com" }, { name = "Alexander Chaikovsky" }]
# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
]
readme = "README.md"
keywords = [
    "python",
    "package",
    "project",
    "template",
    "poetry",
    "cookiecutter",
]
requires-python = ">=3.9"
license = { file = "LICENSE", name = "MIT" }

[project.urls]
homepage = "https://alexchay.github.io/"
repository = "https://github.com/alexchay/python-package-template"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "python-package-template"
version = "0.0.1"
description = "Cookiecutter template for Python cli/packages"
authors = ["Alexander Chaikovsky <alexchay@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://alexchay.github.io/"
repository = "https://github.com/alexchay/python-package-template"
keywords = [
    "python",
    "package",
    "project",
    "template",
    "poetry",
    "cookiecutter",
]
# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
]
packages = [{ include = "package_name", from = "src" }]


[tool.poetry.scripts]
python-package = "package_name.main:main"

# main dependency group
# poetry install --only main
[tool.poetry.dependencies]
python = "^3.9"
colorama = "^0.4.6"


[tool.poetry.group.dev]
# poetry install --with dev
optional = true
[tool.poetry.group.dev.dependencies]
pylint = "^2.8.3"
ruff = "^0.0.270"
commitizen = "*"
bump2version = "*"
bpython = "*"
pdbpp = "*"
flake8 = "*"
flake8-bugbear = "*"
flake8-pyproject = "^1.2.3"
mypy = "*"
mypy-extensions = "^1.0.0"
types-termcolor = "^1.1.6.2"
black = { version = "*", allow-prereleases = true }
rope = "*"
types-setuptools = "*"
pre-commit = "^3.3.1"
tox = "^4.6.2"
cookiecutter = "^2.1.1"
build = "^0.10.0"


[tool.poetry.group.docs]
# poetry install --with docs
optional = true
[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"


[tool.poetry.group.test]
# poetry install --with test
optional = true
[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-asyncio = "*"
pytest-html = "^3.1.1"
pytest-cov = "^3.0.0"
pytest-custom-exit-code = "*"
pytest-randomly = "^3.13.0"
coverage = "^6.1.2"
coverage-badge = "^1.1.0"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs = [
    "{{ cookiecutter.project_name }}",
    "hooks",
    "*.egg",
    ".eggs",
    "dist",
    "build",
    "docs",
    ".tox",
    ".git",
    "__pycache__",
]
doctest_optionflags = [
    "NUMBER",
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
]
# Extra options:
addopts = [
    "-vv",
    "--import-mode=prepend",
    "--disable-pytest-warnings",
    "--strict-markers",
    "--tb=short",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "mymarker: my custom marker",
]

[tool.coverage.run]
branch = true
source = ["src", "tests"]

[tool.coverage.report]
fail_under = 50
show_missing = true
skip_covered = true


[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = "3.9"
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
ignore_errors = false


[tool.flake8]
max-line-length = 140
count = true
max-complexity = 10
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]


[tool.black]
line-length = 140
target-version = ["py39", "py310"]
skip-string-normalization = true
# color = true
include = "\\.pyi?$"
exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''


[tool.ruff]
# Increase the maximum line length to 150 characters.
line-length = 150
src = ["src", "tests"]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    # "I",  # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_type = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
bump_message = "bump: version $current_version â†’ $new_version"
annotated_tag = false
version_files = ["VERSION", "pyproject.toml:version"]
