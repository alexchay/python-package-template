{%- raw %}
name: Packaging

on: [push, pull_request, workflow_dispatch]

jobs:
  validate:
    name: validate
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
        platform: [ubuntu-22.04]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cached-poetry-dependencies
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ github.job }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        if: ${{ matrix.platform != 'windows-latest' }}  # windows hangs if using a cached venv

      - name: Install Dependencies
        run: task install-dev
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Run code formatter check, linting, static type analysis
        run: task static-analysis

  pytest:
    name: Testing on Python ${{ matrix.python-version }} (${{ matrix.platform}})
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        python-version: [ '3.9', '3.10' ]
        platform: [ubuntu-22.04]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cached-poetry-dependencies
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ github.job }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        if: ${{ matrix.platform != 'windows-latest' }}  # windows hangs if using a cached venv

      - name: Install Dependencies
        run: task install_with_test
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Run Tests
        run: |
          poetry run pytest tests -vv -s -l --disable-pytest-warnings \
          --cov=src --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=80 --cov-branch

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4.0.0
        with:
          python-version: "3.10"

      - name: Install build
        run: python -m pip install build

      - name: Run build
        run: python -m build
{% endraw %}
      - uses: actions/upload-artifact@v3
        with:
          name: {{ cookiecutter.project_name }}
          path: dist/

